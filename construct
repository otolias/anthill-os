#!/bin/sh

DEST_DIR="build"
SYSROOT="$DEST_DIR/sysroot"
BOOT_DIR="$SYSROOT/boot"
PREFIX="$SYSROOT/usr"
LIB_DIR="$PREFIX/lib"
INC_DIR="$PREFIX/include"
HOST="aarch64-elf"
CFLAGS="-Wall -Wextra -ffreestanding -O2 -g -DDEBUG"
LFLAGS="-T linker.ld"
CC="$HOST-gcc --sysroot=$SYSROOT -isystem=/usr/include"
LD="$HOST-ld --sysroot=$SYSROOT"
action=""
only=false

usage="Build helper:
Usage: construct [action] [options]

Actions:
    generate | g               Generate ninja file
    build    | b               Above and build Project
    run      | r               Above and run with QEMU
    debug    | d               Run qemu and connect gdb
    clean    | c               Remove build files

Options:
    -o | --only                Only run specified action.
    -c | --compiler [prefix]   Compiler prefix to use. Make sure it is in PATH.
                               Default: aarch64-elf
"

colour_print () {
    printf "[33m%s[0m\n" "$1"
}

generate() {
    colour_print "Preparing build"
    mkdir -p \
        "$DEST_DIR" \
        "$SYSROOT" \
        "$BOOT_DIR" \
        "$PREFIX" \
        "$LIB_DIR" \
        "$INC_DIR" \

    # Variables
    export ninja_file=""
    ninja_file+=$(printf "cc = %s" "$CC")
    ninja_file+=$(printf "\nld = %s" "$LD")
    ninja_file+=$(printf "\nincludes =")
    ninja_file+=$(printf "\ncflags =")
    ninja_file+=$(printf "\nlflags = %s" "$LFLAGS")

    colour_print "Installing headers"

    while read -r folder; do
        rsync -rt "$folder/" "$INC_DIR/"
    done <<< "$(find src/ -type d -name include)"

    colour_print "Generating Sources"

    # Rules
    ninja_file+=$(printf "\n\nrule cc")
    ninja_file+=$(printf "\n    command = \$cc %s \$cflags \$includes -c \$in -o \$out" \
        "$CFLAGS"
    )
    ninja_file+=$(printf "\n\nrule link")
    ninja_file+=$(printf "\n    command = \$ld \$in \$lflags -o \$out")
    ninja_file+=$(printf "\n\nrule objcopy")
    ninja_file+=$(printf "\n    command = %s-objcopy --strip-debug -O binary \$in \$out" \
        "$HOST"
    )
    ninja_file+=$(printf "\n ")

    # Generating sources

    kernel_objects=""

    while read -r build_opts; do
        source "$build_opts"
        objects=""

        ninja_file+=$(printf "\n ")
        while read -r src; do
            dest=$(printf "%s" "$src" | \
               sed "s/\.c/\.o/" | \
               sed "s/\.S/\_S.o/" | \
               sed "s/src/\\$DEST_DIR/")

            ninja_file+=$(printf "\nbuild %s: cc %s" "$dest" "$src")
            [ -n "$INCLUDES" ] && ninja_file+=$(printf "\n    includes=%s" "$INCLUDES")
            [ -n "$CFLAGS" ] && ninja_file+=$(printf "\n    cflags=%s" "$CFLAGS")

            objects+=$(printf " %s" "$dest")
        done <<< "$(find "$(dirname "$build_opts")" -type f -name "*.[Sc]")"

        case "$TARGET" in
            "lib")
                ninja_file+=$(printf "\n\nbuild %s/%s.so: link %s" \
                    "$LIB_DIR" \
                    "$NAME" \
                    "$objects" \
                )
                ninja_file+=$(printf "\n    lflags=--shared")
                ;;
            *)
                kernel_objects+=$(printf " \$\n    %s" "$objects")
                ;;
        esac

    done <<< "$(find src/ -type f -name build_opts)"

    ninja_file+=$(printf "\n\nbuild %s/kernel8.elf: link %s" \
        "$DEST_DIR" \
        "$kernel_objects" \
    )

   ninja_file+=$(printf "\n\nbuild %s/kernel8.bin: objcopy %s/kernel8.elf" \
       "$BOOT_DIR" \
       "$DEST_DIR" \
   )

    printf "%s\n" "$ninja_file" > build.ninja
}

package() {
    tar -c "$SYSROOT" | cat $BOOT_DIR/kernel8.bin - > $DEST_DIR/kernel.bin
}

while :; do
    case $1 in
        -c | --compiler)
            [ -z "$2" ] && printf "Error: No compiler given\n" && exit 1
            HOST="$2"
            shift 2
            ;;
        -o | --only)
            only=true
            shift
            ;;
        -h | --help)
            printf "%s" "$usage"
            exit
            ;;
        generate | g)
            action="generate"
            shift
            ;;
        build | b)
            action="build"
            shift
            ;;
        run | r)
            action="run"
            shift
            ;;
        debug | d)
            action="debug"
            shift
            ;;
        clean | c)
            action="clean"
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            break
            ;;
    esac
done

[ -z $action ] && printf "Error: Invalid action\n" && exit 1

case $action in
    generate)
        generate && \
            ninja -t compdb cxx cc > compile_commands.json
        exit
        ;;
    build)
        [ $only = false ] && generate
        ninja && package
        exit
        ;;
    run)
        [ $only = false ] && \
            generate && \
            ninja && \
            package
        qemu-system-aarch64 \
            -M raspi3b \
            -kernel "$DEST_DIR"/kernel.bin \
            -serial null \
            -serial stdio
        exit
        ;;
    debug)
        qemu-system-aarch64 -s -S \
            -M raspi3b \
            -kernel "$DEST_DIR"/kernel.bin \
            -serial null \
            -serial stdio \
            &

        aarch64-elf-gdb --symbols="$DEST_DIR/kernel8.elf" -ex "target remote localhost:1234"
        ;;
    clean)
        rm -rf build build.ninja cache .ninja_log compile_commands.json
        ;;
esac


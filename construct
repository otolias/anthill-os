#!/bin/sh

action=""
compiler_prefix=""
target="debug"
usage="Build helper:
Usage: construct [action] [options]

Actions:
    create | c                 Generate ninja file
    build | b                  Above and build Project
    run | r                    Above and run with QEMU
    debug | d                  Above and connect gdb

Options:
    -t [target]                Specify Target.
                               {r, rel, release} for release and
                               {d, deb, debug} for debug
    -c [compiler prefix]       Compiler prefix to use. Make sure it is in PATH. 
                               Leave empty for system default. e.x. aarch64-elf
"

colour_print () {
    printf "[33m%s[0m\n" "$1"
}

build () {
    # Default cflags
    cflags="-Wall -Wextra -ffreestanding"
    [ $target = "release" ] && cflags+=" -O2"
    [ $target = "debug" ] && cflags+=" -g"
    ninja_file=$(printf "cflags = %s" "$cflags")

    # Includes
    colour_print "Generating Includes"
    ninja_file+=$(printf "\nincludes =")
    includes=$(find src/ -name "include" -type d)
    for inc in $includes; do
        ninja_file+=$(printf " -I%s" "$inc")
    done

    colour_print "Generating Sources"
    # Rules
    ninja_file+=$(printf "\n\nrule cc") 
    ninja_file+=$(printf "\n    command = %sgcc \$cflags \$includes -c \$in -o \$out" "$compiler_prefix")
    ninja_file+=$(printf "\n\nrule link")
    ninja_file+=$(printf "\n    command = %sld -nostdlib \$in -T linker.ld -o \$out" "$compiler_prefix")
    ninja_file+=$(printf "\n\nrule objcopy")
    ninja_file+=$(printf "\n    command = %sobjcopy -O binary \$in \$out" "$compiler_prefix")

    # Generating Sources
    ninja_file+=$(printf "\n ")
    sources=$(find src/ -name "*.[Sc]")
    objects=""
    for src in $sources; do
        dest=$(printf "%s" "$src" | sed "s/\.[Sc]/\.o/" | sed "s/src/build/")
        ninja_file+=$(printf "\nbuild %s: cc %s" "$dest" "$src")
        objects+=$(printf "%s " "$dest")
    done

    # Link
    colour_print "Linking"
    ninja_file+=$(printf "\n\nbuild build/kernel8.elf: link %s" "$objects")
    ninja_file+=$(printf "\nbuild build/kernel8.bin: objcopy build/kernel8.elf")

    mkdir -p build
    printf "%s\n" "$ninja_file" > build.ninja
}

while :; do
    case $1 in
        -c | --compiler)
            [ -z "$2" ] && printf "Error: No compiler given\n" && exit 1
            compiler_prefix="$2-"
            shift 2
            ;;
        -t | --target)
            [ -z "$2" ] && printf "Error: No target given\n" && exit 1
            case $2 in
                "r" | "rel" | "release")
                    target="release"
                    ;;
                "d" | "deb" | "debug")
                    target="debug"
                    ;;
                *)
                    printf "Error: Unknown target %s\n" "$2" && exit 1
                    ;;
            esac
            shift 2
            ;;
        -h | --help)
            printf "%s" "$usage"
            exit
            ;;
        create | c)
            action="create"
            shift
            ;;
        build | b)
            action="build"
            shift
            ;;
        run | r)
            action="run"
            shift
            ;;
        debug | d)
            action="debug"
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            break
            ;;
    esac
done

[ -z $action ] && printf "Error: Invalid action\n" && exit 1

case $action in
    "create")
        build
        exit
        ;;
    "build")
        build && ninja
        exit
        ;;
    "run")
        [ ! -d build ] && build 
        ninja && \
            qemu-system-aarch64 -M raspi3b -kernel build/kernel8.bin -serial null -serial stdio
        exit
        ;;
    "debug")
        [ ! -d build ] && build
        ninja && \
            qemu-system-aarch64 -s -S -M raspi3b -kernel build/kernel8.bin -serial null -serial stdio &
        gdb --symbols=build/kernel8.elf -ex "target remote localhost:1234"
esac

